// Code generated by protoc-gen-go. DO NOT EDIT.
// source: republique.proto

package republique

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Arm int32

const (
	Arm_SUPPORT   Arm = 0
	Arm_INFANTRY  Arm = 1
	Arm_CAVALRY   Arm = 2
	Arm_ARTILLERY Arm = 3
	Arm_COMMAND   Arm = 4
)

var Arm_name = map[int32]string{
	0: "SUPPORT",
	1: "INFANTRY",
	2: "CAVALRY",
	3: "ARTILLERY",
	4: "COMMAND",
}

var Arm_value = map[string]int32{
	"SUPPORT":   0,
	"INFANTRY":  1,
	"CAVALRY":   2,
	"ARTILLERY": 3,
	"COMMAND":   4,
}

func (x Arm) String() string {
	return proto.EnumName(Arm_name, int32(x))
}

func (Arm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{0}
}

type UnitType int32

const (
	UnitType_SUPPORT_UNIT       UnitType = 0
	UnitType_INFANTRY_LINE      UnitType = 1
	UnitType_INFANTRY_LIGHT     UnitType = 2
	UnitType_INFANTRY_GUARD     UnitType = 3
	UnitType_INFANTRY_MILITIA   UnitType = 4
	UnitType_CAVALRY_LIGHT      UnitType = 5
	UnitType_CAVALRY_HUSSAR     UnitType = 6
	UnitType_CAVALRY_DRAGOON    UnitType = 7
	UnitType_CAVALRY_CUIRASSIER UnitType = 8
	UnitType_CAVALRY_COSSACK    UnitType = 9
	UnitType_ARTILLERY_BN       UnitType = 10
	UnitType_ARTILLERY_LIGHT    UnitType = 11
	UnitType_ARTILLERY_MEDIUM   UnitType = 12
	UnitType_ARTILLERY_HEAVY    UnitType = 13
	UnitType_ARTILLERY_HORSE    UnitType = 14
)

var UnitType_name = map[int32]string{
	0:  "SUPPORT_UNIT",
	1:  "INFANTRY_LINE",
	2:  "INFANTRY_LIGHT",
	3:  "INFANTRY_GUARD",
	4:  "INFANTRY_MILITIA",
	5:  "CAVALRY_LIGHT",
	6:  "CAVALRY_HUSSAR",
	7:  "CAVALRY_DRAGOON",
	8:  "CAVALRY_CUIRASSIER",
	9:  "CAVALRY_COSSACK",
	10: "ARTILLERY_BN",
	11: "ARTILLERY_LIGHT",
	12: "ARTILLERY_MEDIUM",
	13: "ARTILLERY_HEAVY",
	14: "ARTILLERY_HORSE",
}

var UnitType_value = map[string]int32{
	"SUPPORT_UNIT":       0,
	"INFANTRY_LINE":      1,
	"INFANTRY_LIGHT":     2,
	"INFANTRY_GUARD":     3,
	"INFANTRY_MILITIA":   4,
	"CAVALRY_LIGHT":      5,
	"CAVALRY_HUSSAR":     6,
	"CAVALRY_DRAGOON":    7,
	"CAVALRY_CUIRASSIER": 8,
	"CAVALRY_COSSACK":    9,
	"ARTILLERY_BN":       10,
	"ARTILLERY_LIGHT":    11,
	"ARTILLERY_MEDIUM":   12,
	"ARTILLERY_HEAVY":    13,
	"ARTILLERY_HORSE":    14,
}

func (x UnitType) String() string {
	return proto.EnumName(UnitType_name, int32(x))
}

func (UnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{1}
}

type UnitGrade int32

const (
	UnitGrade_CIVILIAN  UnitGrade = 0
	UnitGrade_MILITIA   UnitGrade = 1
	UnitGrade_CONSCRIPT UnitGrade = 2
	UnitGrade_REGULAR   UnitGrade = 3
	UnitGrade_VETERAN   UnitGrade = 4
	UnitGrade_ELITE     UnitGrade = 5
	UnitGrade_GUARD     UnitGrade = 6
)

var UnitGrade_name = map[int32]string{
	0: "CIVILIAN",
	1: "MILITIA",
	2: "CONSCRIPT",
	3: "REGULAR",
	4: "VETERAN",
	5: "ELITE",
	6: "GUARD",
}

var UnitGrade_value = map[string]int32{
	"CIVILIAN":  0,
	"MILITIA":   1,
	"CONSCRIPT": 2,
	"REGULAR":   3,
	"VETERAN":   4,
	"ELITE":     5,
	"GUARD":     6,
}

func (x UnitGrade) String() string {
	return proto.EnumName(UnitGrade_name, int32(x))
}

func (UnitGrade) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{2}
}

type MoraleState int32

const (
	MoraleState_RESTING     MoraleState = 0
	MoraleState_GOOD        MoraleState = 1
	MoraleState_UNFORMED    MoraleState = 2
	MoraleState_RATTLED     MoraleState = 3
	MoraleState_SHAKEN      MoraleState = 4
	MoraleState_DEMORALISED MoraleState = 5
)

var MoraleState_name = map[int32]string{
	0: "RESTING",
	1: "GOOD",
	2: "UNFORMED",
	3: "RATTLED",
	4: "SHAKEN",
	5: "DEMORALISED",
}

var MoraleState_value = map[string]int32{
	"RESTING":     0,
	"GOOD":        1,
	"UNFORMED":    2,
	"RATTLED":     3,
	"SHAKEN":      4,
	"DEMORALISED": 5,
}

func (x MoraleState) String() string {
	return proto.EnumName(MoraleState_name, int32(x))
}

func (MoraleState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{3}
}

type Formation int32

const (
	Formation_RESERVE          Formation = 0
	Formation_MARCH_COLUMN     Formation = 1
	Formation_ATTACK_COLUMN    Formation = 2
	Formation_LINE             Formation = 3
	Formation_ECHELON          Formation = 4
	Formation_SUPPORTING_LINES Formation = 5
	Formation_DEBANDE          Formation = 6
	Formation_FORTIFIED        Formation = 7
)

var Formation_name = map[int32]string{
	0: "RESERVE",
	1: "MARCH_COLUMN",
	2: "ATTACK_COLUMN",
	3: "LINE",
	4: "ECHELON",
	5: "SUPPORTING_LINES",
	6: "DEBANDE",
	7: "FORTIFIED",
}

var Formation_value = map[string]int32{
	"RESERVE":          0,
	"MARCH_COLUMN":     1,
	"ATTACK_COLUMN":    2,
	"LINE":             3,
	"ECHELON":          4,
	"SUPPORTING_LINES": 5,
	"DEBANDE":          6,
	"FORTIFIED":        7,
}

func (x Formation) String() string {
	return proto.EnumName(Formation_name, int32(x))
}

func (Formation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{4}
}

type Rank int32

const (
	Rank_BATTALION       Rank = 0
	Rank_BRIGADE         Rank = 1
	Rank_DIVISION        Rank = 2
	Rank_CORPS           Rank = 3
	Rank_WING            Rank = 4
	Rank_ARMY            Rank = 5
	Rank_NATIONAL_LEADER Rank = 6
	Rank_ARTILLERY_DIV   Rank = 7
	Rank_CAVALRY_BDE     Rank = 8
	Rank_CAVALRY_DIV     Rank = 9
	Rank_BATTERY         Rank = 10
	Rank_GUN_PARK        Rank = 11
)

var Rank_name = map[int32]string{
	0:  "BATTALION",
	1:  "BRIGADE",
	2:  "DIVISION",
	3:  "CORPS",
	4:  "WING",
	5:  "ARMY",
	6:  "NATIONAL_LEADER",
	7:  "ARTILLERY_DIV",
	8:  "CAVALRY_BDE",
	9:  "CAVALRY_DIV",
	10: "BATTERY",
	11: "GUN_PARK",
}

var Rank_value = map[string]int32{
	"BATTALION":       0,
	"BRIGADE":         1,
	"DIVISION":        2,
	"CORPS":           3,
	"WING":            4,
	"ARMY":            5,
	"NATIONAL_LEADER": 6,
	"ARTILLERY_DIV":   7,
	"CAVALRY_BDE":     8,
	"CAVALRY_DIV":     9,
	"BATTERY":         10,
	"GUN_PARK":        11,
}

func (x Rank) String() string {
	return proto.EnumName(Rank_name, int32(x))
}

func (Rank) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{5}
}

type SkirmishRating int32

const (
	SkirmishRating_POOR       SkirmishRating = 0
	SkirmishRating_ADEQUATE   SkirmishRating = 1
	SkirmishRating_CRACK_SHOT SkirmishRating = 2
	SkirmishRating_EXCELLENT  SkirmishRating = 3
)

var SkirmishRating_name = map[int32]string{
	0: "POOR",
	1: "ADEQUATE",
	2: "CRACK_SHOT",
	3: "EXCELLENT",
}

var SkirmishRating_value = map[string]int32{
	"POOR":       0,
	"ADEQUATE":   1,
	"CRACK_SHOT": 2,
	"EXCELLENT":  3,
}

func (x SkirmishRating) String() string {
	return proto.EnumName(SkirmishRating_name, int32(x))
}

func (SkirmishRating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{6}
}

type CommandRating int32

const (
	CommandRating_USELESS    CommandRating = 0
	CommandRating_CUMBERSOME CommandRating = 1
	CommandRating_FUNCTIONAL CommandRating = 2
	CommandRating_EFFICIENT  CommandRating = 3
)

var CommandRating_name = map[int32]string{
	0: "USELESS",
	1: "CUMBERSOME",
	2: "FUNCTIONAL",
	3: "EFFICIENT",
}

var CommandRating_value = map[string]int32{
	"USELESS":    0,
	"CUMBERSOME": 1,
	"FUNCTIONAL": 2,
	"EFFICIENT":  3,
}

func (x CommandRating) String() string {
	return proto.EnumName(CommandRating_name, int32(x))
}

func (CommandRating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{7}
}

type Order int32

const (
	Order_RESTAGE  Order = 0
	Order_MARCH    Order = 1
	Order_MOVE     Order = 2
	Order_DEFEND   Order = 3
	Order_WITHDRAW Order = 4
	Order_ATTACK   Order = 5
	Order_RALLY    Order = 6
)

var Order_name = map[int32]string{
	0: "RESTAGE",
	1: "MARCH",
	2: "MOVE",
	3: "DEFEND",
	4: "WITHDRAW",
	5: "ATTACK",
	6: "RALLY",
}

var Order_value = map[string]int32{
	"RESTAGE":  0,
	"MARCH":    1,
	"MOVE":     2,
	"DEFEND":   3,
	"WITHDRAW": 4,
	"ATTACK":   5,
	"RALLY":    6,
}

func (x Order) String() string {
	return proto.EnumName(Order_name, int32(x))
}

func (Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{8}
}

type Nationality int32

const (
	Nationality_ANY_NATION   Nationality = 0
	Nationality_FRENCH       Nationality = 1
	Nationality_BRITISH      Nationality = 2
	Nationality_RUSSIAN      Nationality = 3
	Nationality_PRUSSIAN     Nationality = 4
	Nationality_SPANISH      Nationality = 6
	Nationality_OTTOMAN      Nationality = 7
	Nationality_PERSIAN      Nationality = 8
	Nationality_AUSTRIAN     Nationality = 9
	Nationality_AMERICAN     Nationality = 10
	Nationality_INDIAN       Nationality = 11
	Nationality_ITALIAN      Nationality = 12
	Nationality_BAVARIAN     Nationality = 13
	Nationality_DUTCH        Nationality = 14
	Nationality_BELGIAN      Nationality = 15
	Nationality_NASSAU       Nationality = 16
	Nationality_SWISS        Nationality = 17
	Nationality_PAPAL_STATES Nationality = 18
	Nationality_AFRICAN      Nationality = 19
	Nationality_NATIVE       Nationality = 20
	Nationality_COLONIAL     Nationality = 21
)

var Nationality_name = map[int32]string{
	0:  "ANY_NATION",
	1:  "FRENCH",
	2:  "BRITISH",
	3:  "RUSSIAN",
	4:  "PRUSSIAN",
	6:  "SPANISH",
	7:  "OTTOMAN",
	8:  "PERSIAN",
	9:  "AUSTRIAN",
	10: "AMERICAN",
	11: "INDIAN",
	12: "ITALIAN",
	13: "BAVARIAN",
	14: "DUTCH",
	15: "BELGIAN",
	16: "NASSAU",
	17: "SWISS",
	18: "PAPAL_STATES",
	19: "AFRICAN",
	20: "NATIVE",
	21: "COLONIAL",
}

var Nationality_value = map[string]int32{
	"ANY_NATION":   0,
	"FRENCH":       1,
	"BRITISH":      2,
	"RUSSIAN":      3,
	"PRUSSIAN":     4,
	"SPANISH":      6,
	"OTTOMAN":      7,
	"PERSIAN":      8,
	"AUSTRIAN":     9,
	"AMERICAN":     10,
	"INDIAN":       11,
	"ITALIAN":      12,
	"BAVARIAN":     13,
	"DUTCH":        14,
	"BELGIAN":      15,
	"NASSAU":       16,
	"SWISS":        17,
	"PAPAL_STATES": 18,
	"AFRICAN":      19,
	"NATIVE":       20,
	"COLONIAL":     21,
}

func (x Nationality) String() string {
	return proto.EnumName(Nationality_name, int32(x))
}

func (Nationality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{9}
}

type Drill int32

const (
	Drill_LINEAR Drill = 0
	Drill_MASSED Drill = 1
	Drill_RAPID  Drill = 2
)

var Drill_name = map[int32]string{
	0: "LINEAR",
	1: "MASSED",
	2: "RAPID",
}

var Drill_value = map[string]int32{
	"LINEAR": 0,
	"MASSED": 1,
	"RAPID":  2,
}

func (x Drill) String() string {
	return proto.EnumName(Drill_name, int32(x))
}

func (Drill) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{10}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Messages
type StringMessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringMessage) Reset()         { *m = StringMessage{} }
func (m *StringMessage) String() string { return proto.CompactTextString(m) }
func (*StringMessage) ProtoMessage()    {}
func (*StringMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{0}
}

func (m *StringMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMessage.Unmarshal(m, b)
}
func (m *StringMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMessage.Marshal(b, m, deterministic)
}
func (m *StringMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMessage.Merge(m, src)
}
func (m *StringMessage) XXX_Size() int {
	return xxx_messageInfo_StringMessage.Size(m)
}
func (m *StringMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StringMessage proto.InternalMessageInfo

func (m *StringMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{1}
}

func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMessage.Unmarshal(m, b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
}
func (m *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(m, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return xxx_messageInfo_EmptyMessage.Size(m)
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

type Grid struct {
	X                    int64    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Cover                bool     `protobuf:"varint,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Woods                bool     `protobuf:"varint,4,opt,name=woods,proto3" json:"woods,omitempty"`
	Bua                  bool     `protobuf:"varint,5,opt,name=bua,proto3" json:"bua,omitempty"`
	Fort                 bool     `protobuf:"varint,6,opt,name=fort,proto3" json:"fort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Grid) Reset()         { *m = Grid{} }
func (m *Grid) String() string { return proto.CompactTextString(m) }
func (*Grid) ProtoMessage()    {}
func (*Grid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{2}
}

func (m *Grid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Grid.Unmarshal(m, b)
}
func (m *Grid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Grid.Marshal(b, m, deterministic)
}
func (m *Grid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Grid.Merge(m, src)
}
func (m *Grid) XXX_Size() int {
	return xxx_messageInfo_Grid.Size(m)
}
func (m *Grid) XXX_DiscardUnknown() {
	xxx_messageInfo_Grid.DiscardUnknown(m)
}

var xxx_messageInfo_Grid proto.InternalMessageInfo

func (m *Grid) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Grid) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Grid) GetCover() bool {
	if m != nil {
		return m.Cover
	}
	return false
}

func (m *Grid) GetWoods() bool {
	if m != nil {
		return m.Woods
	}
	return false
}

func (m *Grid) GetBua() bool {
	if m != nil {
		return m.Bua
	}
	return false
}

func (m *Grid) GetFort() bool {
	if m != nil {
		return m.Fort
	}
	return false
}

type Unit struct {
	Uuid                 string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Arm                  Arm            `protobuf:"varint,3,opt,name=arm,proto3,enum=republique.Arm" json:"arm,omitempty"`
	UnitType             UnitType       `protobuf:"varint,4,opt,name=unitType,proto3,enum=republique.UnitType" json:"unitType,omitempty"`
	Strength             int64          `protobuf:"varint,5,opt,name=strength,proto3" json:"strength,omitempty"`
	Hits                 int64          `protobuf:"varint,6,opt,name=hits,proto3" json:"hits,omitempty"`
	Grade                UnitGrade      `protobuf:"varint,7,opt,name=grade,proto3,enum=republique.UnitGrade" json:"grade,omitempty"`
	MoraleBase           MoraleState    `protobuf:"varint,8,opt,name=moraleBase,proto3,enum=republique.MoraleState" json:"moraleBase,omitempty"`
	MoraleState          MoraleState    `protobuf:"varint,9,opt,name=moraleState,proto3,enum=republique.MoraleState" json:"moraleState,omitempty"`
	SkirmishRating       SkirmishRating `protobuf:"varint,10,opt,name=skirmishRating,proto3,enum=republique.SkirmishRating" json:"skirmishRating,omitempty"`
	SkirmisherMax        int64          `protobuf:"varint,11,opt,name=skirmisherMax,proto3" json:"skirmisherMax,omitempty"`
	SkirmishersDeployed  int64          `protobuf:"varint,12,opt,name=skirmishersDeployed,proto3" json:"skirmishersDeployed,omitempty"`
	Formation            Formation      `protobuf:"varint,13,opt,name=formation,proto3,enum=republique.Formation" json:"formation,omitempty"`
	ParentCommand        string         `protobuf:"bytes,14,opt,name=parentCommand,proto3" json:"parentCommand,omitempty"`
	BnGuns               bool           `protobuf:"varint,15,opt,name=bnGuns,proto3" json:"bnGuns,omitempty"`
	GunsDamaged          bool           `protobuf:"varint,16,opt,name=gunsDamaged,proto3" json:"gunsDamaged,omitempty"`
	GunsDeployed         bool           `protobuf:"varint,17,opt,name=gunsDeployed,proto3" json:"gunsDeployed,omitempty"`
	GunsStocked          bool           `protobuf:"varint,18,opt,name=gunsStocked,proto3" json:"gunsStocked,omitempty"`
	Hidden               bool           `protobuf:"varint,19,opt,name=hidden,proto3" json:"hidden,omitempty"`
	HasFired             bool           `protobuf:"varint,20,opt,name=hasFired,proto3" json:"hasFired,omitempty"`
	Fatigue              int64          `protobuf:"varint,21,opt,name=fatigue,proto3" json:"fatigue,omitempty"`
	LowAmmo              bool           `protobuf:"varint,22,opt,name=lowAmmo,proto3" json:"lowAmmo,omitempty"`
	Cover                int64          `protobuf:"varint,23,opt,name=cover,proto3" json:"cover,omitempty"`
	PinCode              string         `protobuf:"bytes,24,opt,name=pinCode,proto3" json:"pinCode,omitempty"`
	Grid                 *Grid          `protobuf:"bytes,25,opt,name=grid,proto3" json:"grid,omitempty"`
	Instructions         string         `protobuf:"bytes,26,opt,name=instructions,proto3" json:"instructions,omitempty"`
	ActionRequired       bool           `protobuf:"varint,27,opt,name=actionRequired,proto3" json:"actionRequired,omitempty"`
	Objective            *Grid          `protobuf:"bytes,28,opt,name=objective,proto3" json:"objective,omitempty"`
	MoveTo               *Grid          `protobuf:"bytes,29,opt,name=moveTo,proto3" json:"moveTo,omitempty"`
	GunTarget            *Grid          `protobuf:"bytes,30,opt,name=gunTarget,proto3" json:"gunTarget,omitempty"`
	HasCharged           bool           `protobuf:"varint,31,opt,name=hasCharged,proto3" json:"hasCharged,omitempty"`
	SupportingUnit       string         `protobuf:"bytes,32,opt,name=supportingUnit,proto3" json:"supportingUnit,omitempty"`
	EngagedUnit          string         `protobuf:"bytes,33,opt,name=engagedUnit,proto3" json:"engagedUnit,omitempty"`
	CanAssault           bool           `protobuf:"varint,34,opt,name=canAssault,proto3" json:"canAssault,omitempty"`
	HasAssaulted         bool           `protobuf:"varint,35,opt,name=hasAssaulted,proto3" json:"hasAssaulted,omitempty"`
	Nationality          Nationality    `protobuf:"varint,36,opt,name=nationality,proto3,enum=republique.Nationality" json:"nationality,omitempty"`
	Drill                Drill          `protobuf:"varint,37,opt,name=drill,proto3,enum=republique.Drill" json:"drill,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Unit) Reset()         { *m = Unit{} }
func (m *Unit) String() string { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()    {}
func (*Unit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{3}
}

func (m *Unit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unit.Unmarshal(m, b)
}
func (m *Unit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unit.Marshal(b, m, deterministic)
}
func (m *Unit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unit.Merge(m, src)
}
func (m *Unit) XXX_Size() int {
	return xxx_messageInfo_Unit.Size(m)
}
func (m *Unit) XXX_DiscardUnknown() {
	xxx_messageInfo_Unit.DiscardUnknown(m)
}

var xxx_messageInfo_Unit proto.InternalMessageInfo

func (m *Unit) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Unit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Unit) GetArm() Arm {
	if m != nil {
		return m.Arm
	}
	return Arm_SUPPORT
}

func (m *Unit) GetUnitType() UnitType {
	if m != nil {
		return m.UnitType
	}
	return UnitType_SUPPORT_UNIT
}

func (m *Unit) GetStrength() int64 {
	if m != nil {
		return m.Strength
	}
	return 0
}

func (m *Unit) GetHits() int64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *Unit) GetGrade() UnitGrade {
	if m != nil {
		return m.Grade
	}
	return UnitGrade_CIVILIAN
}

func (m *Unit) GetMoraleBase() MoraleState {
	if m != nil {
		return m.MoraleBase
	}
	return MoraleState_RESTING
}

func (m *Unit) GetMoraleState() MoraleState {
	if m != nil {
		return m.MoraleState
	}
	return MoraleState_RESTING
}

func (m *Unit) GetSkirmishRating() SkirmishRating {
	if m != nil {
		return m.SkirmishRating
	}
	return SkirmishRating_POOR
}

func (m *Unit) GetSkirmisherMax() int64 {
	if m != nil {
		return m.SkirmisherMax
	}
	return 0
}

func (m *Unit) GetSkirmishersDeployed() int64 {
	if m != nil {
		return m.SkirmishersDeployed
	}
	return 0
}

func (m *Unit) GetFormation() Formation {
	if m != nil {
		return m.Formation
	}
	return Formation_RESERVE
}

func (m *Unit) GetParentCommand() string {
	if m != nil {
		return m.ParentCommand
	}
	return ""
}

func (m *Unit) GetBnGuns() bool {
	if m != nil {
		return m.BnGuns
	}
	return false
}

func (m *Unit) GetGunsDamaged() bool {
	if m != nil {
		return m.GunsDamaged
	}
	return false
}

func (m *Unit) GetGunsDeployed() bool {
	if m != nil {
		return m.GunsDeployed
	}
	return false
}

func (m *Unit) GetGunsStocked() bool {
	if m != nil {
		return m.GunsStocked
	}
	return false
}

func (m *Unit) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *Unit) GetHasFired() bool {
	if m != nil {
		return m.HasFired
	}
	return false
}

func (m *Unit) GetFatigue() int64 {
	if m != nil {
		return m.Fatigue
	}
	return 0
}

func (m *Unit) GetLowAmmo() bool {
	if m != nil {
		return m.LowAmmo
	}
	return false
}

func (m *Unit) GetCover() int64 {
	if m != nil {
		return m.Cover
	}
	return 0
}

func (m *Unit) GetPinCode() string {
	if m != nil {
		return m.PinCode
	}
	return ""
}

func (m *Unit) GetGrid() *Grid {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *Unit) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *Unit) GetActionRequired() bool {
	if m != nil {
		return m.ActionRequired
	}
	return false
}

func (m *Unit) GetObjective() *Grid {
	if m != nil {
		return m.Objective
	}
	return nil
}

func (m *Unit) GetMoveTo() *Grid {
	if m != nil {
		return m.MoveTo
	}
	return nil
}

func (m *Unit) GetGunTarget() *Grid {
	if m != nil {
		return m.GunTarget
	}
	return nil
}

func (m *Unit) GetHasCharged() bool {
	if m != nil {
		return m.HasCharged
	}
	return false
}

func (m *Unit) GetSupportingUnit() string {
	if m != nil {
		return m.SupportingUnit
	}
	return ""
}

func (m *Unit) GetEngagedUnit() string {
	if m != nil {
		return m.EngagedUnit
	}
	return ""
}

func (m *Unit) GetCanAssault() bool {
	if m != nil {
		return m.CanAssault
	}
	return false
}

func (m *Unit) GetHasAssaulted() bool {
	if m != nil {
		return m.HasAssaulted
	}
	return false
}

func (m *Unit) GetNationality() Nationality {
	if m != nil {
		return m.Nationality
	}
	return Nationality_ANY_NATION
}

func (m *Unit) GetDrill() Drill {
	if m != nil {
		return m.Drill
	}
	return Drill_LINEAR
}

type Command struct {
	CommanderName        string        `protobuf:"bytes,1,opt,name=commanderName,proto3" json:"commanderName,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Formation            string        `protobuf:"bytes,3,opt,name=formation,proto3" json:"formation,omitempty"`
	ParentCommand        string        `protobuf:"bytes,4,opt,name=parentCommand,proto3" json:"parentCommand,omitempty"`
	CommandRating        CommandRating `protobuf:"varint,5,opt,name=commandRating,proto3,enum=republique.CommandRating" json:"commandRating,omitempty"`
	PanicState           int64         `protobuf:"varint,6,opt,name=panicState,proto3" json:"panicState,omitempty"`
	Injured              bool          `protobuf:"varint,7,opt,name=injured,proto3" json:"injured,omitempty"`
	Rank                 Rank          `protobuf:"varint,8,opt,name=rank,proto3,enum=republique.Rank" json:"rank,omitempty"`
	PinCode              string        `protobuf:"bytes,9,opt,name=pinCode,proto3" json:"pinCode,omitempty"`
	AccessCode           string        `protobuf:"bytes,10,opt,name=accessCode,proto3" json:"accessCode,omitempty"`
	Grid                 *Grid         `protobuf:"bytes,11,opt,name=grid,proto3" json:"grid,omitempty"`
	ArmyID               string        `protobuf:"bytes,12,opt,name=armyID,proto3" json:"armyID,omitempty"`
	Objective            string        `protobuf:"bytes,13,opt,name=objective,proto3" json:"objective,omitempty"`
	Orders               Order         `protobuf:"varint,14,opt,name=orders,proto3,enum=republique.Order" json:"orders,omitempty"`
	AttachedTo           string        `protobuf:"bytes,15,opt,name=attachedTo,proto3" json:"attachedTo,omitempty"`
	HasOrdered           bool          `protobuf:"varint,16,opt,name=hasOrdered,proto3" json:"hasOrdered,omitempty"`
	HasMoved             bool          `protobuf:"varint,17,opt,name=hasMoved,proto3" json:"hasMoved,omitempty"`
	HasRallied           bool          `protobuf:"varint,18,opt,name=hasRallied,proto3" json:"hasRallied,omitempty"`
	Subcommands          []*Command    `protobuf:"bytes,19,rep,name=subcommands,proto3" json:"subcommands,omitempty"`
	Units                []*Unit       `protobuf:"bytes,20,rep,name=units,proto3" json:"units,omitempty"`
	CommanderBonus       int64         `protobuf:"varint,21,opt,name=commanderBonus,proto3" json:"commanderBonus,omitempty"`
	Arm                  Arm           `protobuf:"varint,22,opt,name=arm,proto3,enum=republique.Arm" json:"arm,omitempty"`
	Nationality          Nationality   `protobuf:"varint,23,opt,name=nationality,proto3,enum=republique.Nationality" json:"nationality,omitempty"`
	Grade                UnitGrade     `protobuf:"varint,24,opt,name=grade,proto3,enum=republique.UnitGrade" json:"grade,omitempty"`
	Drill                Drill         `protobuf:"varint,25,opt,name=drill,proto3,enum=republique.Drill" json:"drill,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{4}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCommanderName() string {
	if m != nil {
		return m.CommanderName
	}
	return ""
}

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command) GetFormation() string {
	if m != nil {
		return m.Formation
	}
	return ""
}

func (m *Command) GetParentCommand() string {
	if m != nil {
		return m.ParentCommand
	}
	return ""
}

func (m *Command) GetCommandRating() CommandRating {
	if m != nil {
		return m.CommandRating
	}
	return CommandRating_USELESS
}

func (m *Command) GetPanicState() int64 {
	if m != nil {
		return m.PanicState
	}
	return 0
}

func (m *Command) GetInjured() bool {
	if m != nil {
		return m.Injured
	}
	return false
}

func (m *Command) GetRank() Rank {
	if m != nil {
		return m.Rank
	}
	return Rank_BATTALION
}

func (m *Command) GetPinCode() string {
	if m != nil {
		return m.PinCode
	}
	return ""
}

func (m *Command) GetAccessCode() string {
	if m != nil {
		return m.AccessCode
	}
	return ""
}

func (m *Command) GetGrid() *Grid {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *Command) GetArmyID() string {
	if m != nil {
		return m.ArmyID
	}
	return ""
}

func (m *Command) GetObjective() string {
	if m != nil {
		return m.Objective
	}
	return ""
}

func (m *Command) GetOrders() Order {
	if m != nil {
		return m.Orders
	}
	return Order_RESTAGE
}

func (m *Command) GetAttachedTo() string {
	if m != nil {
		return m.AttachedTo
	}
	return ""
}

func (m *Command) GetHasOrdered() bool {
	if m != nil {
		return m.HasOrdered
	}
	return false
}

func (m *Command) GetHasMoved() bool {
	if m != nil {
		return m.HasMoved
	}
	return false
}

func (m *Command) GetHasRallied() bool {
	if m != nil {
		return m.HasRallied
	}
	return false
}

func (m *Command) GetSubcommands() []*Command {
	if m != nil {
		return m.Subcommands
	}
	return nil
}

func (m *Command) GetUnits() []*Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *Command) GetCommanderBonus() int64 {
	if m != nil {
		return m.CommanderBonus
	}
	return 0
}

func (m *Command) GetArm() Arm {
	if m != nil {
		return m.Arm
	}
	return Arm_SUPPORT
}

func (m *Command) GetNationality() Nationality {
	if m != nil {
		return m.Nationality
	}
	return Nationality_ANY_NATION
}

func (m *Command) GetGrade() UnitGrade {
	if m != nil {
		return m.Grade
	}
	return UnitGrade_CIVILIAN
}

func (m *Command) GetDrill() Drill {
	if m != nil {
		return m.Drill
	}
	return Drill_LINEAR
}

type Army struct {
	Uuid                 string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Period               string        `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	CommandRating        CommandRating `protobuf:"varint,4,opt,name=commandRating,proto3,enum=republique.CommandRating" json:"commandRating,omitempty"`
	CommanderID          string        `protobuf:"bytes,5,opt,name=commanderID,proto3" json:"commanderID,omitempty"`
	AccessCode           string        `protobuf:"bytes,6,opt,name=accessCode,proto3" json:"accessCode,omitempty"`
	Commands             []*Command    `protobuf:"bytes,7,rep,name=commands,proto3" json:"commands,omitempty"`
	Nationality          Nationality   `protobuf:"varint,8,opt,name=nationality,proto3,enum=republique.Nationality" json:"nationality,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Army) Reset()         { *m = Army{} }
func (m *Army) String() string { return proto.CompactTextString(m) }
func (*Army) ProtoMessage()    {}
func (*Army) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{5}
}

func (m *Army) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Army.Unmarshal(m, b)
}
func (m *Army) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Army.Marshal(b, m, deterministic)
}
func (m *Army) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Army.Merge(m, src)
}
func (m *Army) XXX_Size() int {
	return xxx_messageInfo_Army.Size(m)
}
func (m *Army) XXX_DiscardUnknown() {
	xxx_messageInfo_Army.DiscardUnknown(m)
}

var xxx_messageInfo_Army proto.InternalMessageInfo

func (m *Army) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Army) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Army) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *Army) GetCommandRating() CommandRating {
	if m != nil {
		return m.CommandRating
	}
	return CommandRating_USELESS
}

func (m *Army) GetCommanderID() string {
	if m != nil {
		return m.CommanderID
	}
	return ""
}

func (m *Army) GetAccessCode() string {
	if m != nil {
		return m.AccessCode
	}
	return ""
}

func (m *Army) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Army) GetNationality() Nationality {
	if m != nil {
		return m.Nationality
	}
	return Nationality_ANY_NATION
}

type ScenarioCommand struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ArmyID               string   `protobuf:"bytes,2,opt,name=armyID,proto3" json:"armyID,omitempty"`
	CommandID            string   `protobuf:"bytes,3,opt,name=commandID,proto3" json:"commandID,omitempty"`
	Briefing             string   `protobuf:"bytes,4,opt,name=briefing,proto3" json:"briefing,omitempty"`
	StartLocation        *Grid    `protobuf:"bytes,5,opt,name=startLocation,proto3" json:"startLocation,omitempty"`
	Objective            string   `protobuf:"bytes,6,opt,name=objective,proto3" json:"objective,omitempty"`
	Orders               Order    `protobuf:"varint,7,opt,name=orders,proto3,enum=republique.Order" json:"orders,omitempty"`
	PlayerName           string   `protobuf:"bytes,8,opt,name=playerName,proto3" json:"playerName,omitempty"`
	PlayerEmail          string   `protobuf:"bytes,9,opt,name=playerEmail,proto3" json:"playerEmail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScenarioCommand) Reset()         { *m = ScenarioCommand{} }
func (m *ScenarioCommand) String() string { return proto.CompactTextString(m) }
func (*ScenarioCommand) ProtoMessage()    {}
func (*ScenarioCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{6}
}

func (m *ScenarioCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScenarioCommand.Unmarshal(m, b)
}
func (m *ScenarioCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScenarioCommand.Marshal(b, m, deterministic)
}
func (m *ScenarioCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScenarioCommand.Merge(m, src)
}
func (m *ScenarioCommand) XXX_Size() int {
	return xxx_messageInfo_ScenarioCommand.Size(m)
}
func (m *ScenarioCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ScenarioCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ScenarioCommand proto.InternalMessageInfo

func (m *ScenarioCommand) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ScenarioCommand) GetArmyID() string {
	if m != nil {
		return m.ArmyID
	}
	return ""
}

func (m *ScenarioCommand) GetCommandID() string {
	if m != nil {
		return m.CommandID
	}
	return ""
}

func (m *ScenarioCommand) GetBriefing() string {
	if m != nil {
		return m.Briefing
	}
	return ""
}

func (m *ScenarioCommand) GetStartLocation() *Grid {
	if m != nil {
		return m.StartLocation
	}
	return nil
}

func (m *ScenarioCommand) GetObjective() string {
	if m != nil {
		return m.Objective
	}
	return ""
}

func (m *ScenarioCommand) GetOrders() Order {
	if m != nil {
		return m.Orders
	}
	return Order_RESTAGE
}

func (m *ScenarioCommand) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *ScenarioCommand) GetPlayerEmail() string {
	if m != nil {
		return m.PlayerEmail
	}
	return ""
}

type Scenario struct {
	Uuid                 string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Background           string               `protobuf:"bytes,2,opt,name=background,proto3" json:"background,omitempty"`
	PlayerCommands       []*ScenarioCommand   `protobuf:"bytes,3,rep,name=playerCommands,proto3" json:"playerCommands,omitempty"`
	Armies               []*Army              `protobuf:"bytes,4,rep,name=armies,proto3" json:"armies,omitempty"`
	Commands             []*Command           `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
	Units                []*Unit              `protobuf:"bytes,6,rep,name=units,proto3" json:"units,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=startTime,proto3" json:"startTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Scenario) Reset()         { *m = Scenario{} }
func (m *Scenario) String() string { return proto.CompactTextString(m) }
func (*Scenario) ProtoMessage()    {}
func (*Scenario) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{7}
}

func (m *Scenario) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scenario.Unmarshal(m, b)
}
func (m *Scenario) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scenario.Marshal(b, m, deterministic)
}
func (m *Scenario) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scenario.Merge(m, src)
}
func (m *Scenario) XXX_Size() int {
	return xxx_messageInfo_Scenario.Size(m)
}
func (m *Scenario) XXX_DiscardUnknown() {
	xxx_messageInfo_Scenario.DiscardUnknown(m)
}

var xxx_messageInfo_Scenario proto.InternalMessageInfo

func (m *Scenario) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Scenario) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *Scenario) GetPlayerCommands() []*ScenarioCommand {
	if m != nil {
		return m.PlayerCommands
	}
	return nil
}

func (m *Scenario) GetArmies() []*Army {
	if m != nil {
		return m.Armies
	}
	return nil
}

func (m *Scenario) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Scenario) GetUnits() []*Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *Scenario) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

type Game struct {
	Uuid                 string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ScenarioID           string               `protobuf:"bytes,2,opt,name=scenarioID,proto3" json:"scenarioID,omitempty"`
	PlayerCommands       []*ScenarioCommand   `protobuf:"bytes,4,rep,name=playerCommands,proto3" json:"playerCommands,omitempty"`
	Armies               []*Army              `protobuf:"bytes,5,rep,name=armies,proto3" json:"armies,omitempty"`
	Commands             []*Command           `protobuf:"bytes,6,rep,name=commands,proto3" json:"commands,omitempty"`
	Units                []*Unit              `protobuf:"bytes,7,rep,name=units,proto3" json:"units,omitempty"`
	TurnNumber           int64                `protobuf:"varint,8,opt,name=turnNumber,proto3" json:"turnNumber,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=startTime,proto3" json:"startTime,omitempty"`
	GameTime             *timestamp.Timestamp `protobuf:"bytes,10,opt,name=gameTime,proto3" json:"gameTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5154d382a6bdd48, []int{8}
}

func (m *Game) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Game.Unmarshal(m, b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Game.Marshal(b, m, deterministic)
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return xxx_messageInfo_Game.Size(m)
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Game) GetScenarioID() string {
	if m != nil {
		return m.ScenarioID
	}
	return ""
}

func (m *Game) GetPlayerCommands() []*ScenarioCommand {
	if m != nil {
		return m.PlayerCommands
	}
	return nil
}

func (m *Game) GetArmies() []*Army {
	if m != nil {
		return m.Armies
	}
	return nil
}

func (m *Game) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Game) GetUnits() []*Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *Game) GetTurnNumber() int64 {
	if m != nil {
		return m.TurnNumber
	}
	return 0
}

func (m *Game) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Game) GetGameTime() *timestamp.Timestamp {
	if m != nil {
		return m.GameTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("republique.Arm", Arm_name, Arm_value)
	proto.RegisterEnum("republique.UnitType", UnitType_name, UnitType_value)
	proto.RegisterEnum("republique.UnitGrade", UnitGrade_name, UnitGrade_value)
	proto.RegisterEnum("republique.MoraleState", MoraleState_name, MoraleState_value)
	proto.RegisterEnum("republique.Formation", Formation_name, Formation_value)
	proto.RegisterEnum("republique.Rank", Rank_name, Rank_value)
	proto.RegisterEnum("republique.SkirmishRating", SkirmishRating_name, SkirmishRating_value)
	proto.RegisterEnum("republique.CommandRating", CommandRating_name, CommandRating_value)
	proto.RegisterEnum("republique.Order", Order_name, Order_value)
	proto.RegisterEnum("republique.Nationality", Nationality_name, Nationality_value)
	proto.RegisterEnum("republique.Drill", Drill_name, Drill_value)
	proto.RegisterType((*StringMessage)(nil), "republique.StringMessage")
	proto.RegisterType((*EmptyMessage)(nil), "republique.EmptyMessage")
	proto.RegisterType((*Grid)(nil), "republique.Grid")
	proto.RegisterType((*Unit)(nil), "republique.Unit")
	proto.RegisterType((*Command)(nil), "republique.Command")
	proto.RegisterType((*Army)(nil), "republique.Army")
	proto.RegisterType((*ScenarioCommand)(nil), "republique.ScenarioCommand")
	proto.RegisterType((*Scenario)(nil), "republique.Scenario")
	proto.RegisterType((*Game)(nil), "republique.Game")
}

func init() { proto.RegisterFile("republique.proto", fileDescriptor_f5154d382a6bdd48) }

var fileDescriptor_f5154d382a6bdd48 = []byte{
	// 2270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdd, 0x6e, 0xe3, 0xd6,
	0xf1, 0xb7, 0xbe, 0xa5, 0x91, 0xad, 0x3d, 0x7b, 0xec, 0x38, 0x8c, 0x93, 0xff, 0xc6, 0xf1, 0x7f,
	0x93, 0x6e, 0x5d, 0xc0, 0x09, 0x1c, 0x34, 0x6d, 0x6f, 0xda, 0x1e, 0x93, 0x94, 0x4c, 0x2c, 0x45,
	0xaa, 0x87, 0x94, 0xb7, 0x2e, 0x0a, 0x18, 0xb4, 0xc4, 0x95, 0x99, 0x15, 0x49, 0x85, 0xa4, 0x9c,
	0xf8, 0x05, 0x7a, 0xdb, 0x9b, 0x3e, 0x40, 0x81, 0xbe, 0x42, 0x7b, 0x53, 0xa0, 0x40, 0x5f, 0xa9,
	0x6f, 0x50, 0xcc, 0xe1, 0x87, 0x28, 0xad, 0xed, 0xec, 0xa2, 0x77, 0x9c, 0xdf, 0xcc, 0x9c, 0x33,
	0x67, 0x66, 0x7e, 0xc3, 0x43, 0x02, 0x89, 0xdc, 0xc5, 0xf2, 0x7a, 0xee, 0x7d, 0xb7, 0x74, 0x4f,
	0x16, 0x51, 0x98, 0x84, 0x14, 0x56, 0xc8, 0xc1, 0xa7, 0xb3, 0x30, 0x9c, 0xcd, 0xdd, 0x2f, 0x85,
	0xe6, 0x7a, 0xf9, 0xfa, 0xcb, 0xc4, 0xf3, 0xdd, 0x38, 0x71, 0xfc, 0x45, 0x6a, 0x7c, 0xf4, 0x39,
	0xec, 0x58, 0x49, 0xe4, 0x05, 0xb3, 0xa1, 0x1b, 0xc7, 0xce, 0xcc, 0xa5, 0x7b, 0xd0, 0xb8, 0x75,
	0xe6, 0x4b, 0x57, 0xaa, 0x1c, 0x56, 0x5e, 0x74, 0x78, 0x2a, 0x1c, 0xf5, 0x60, 0x5b, 0xf5, 0x17,
	0xc9, 0x5d, 0x66, 0x75, 0x94, 0x40, 0x7d, 0x10, 0x79, 0x53, 0xba, 0x0d, 0x95, 0x1f, 0x84, 0x65,
	0x8d, 0x57, 0x7e, 0x40, 0xe9, 0x4e, 0xaa, 0xa6, 0xd2, 0x1d, 0xae, 0x34, 0x09, 0x6f, 0xdd, 0x48,
	0xaa, 0x1d, 0x56, 0x5e, 0xb4, 0x79, 0x2a, 0x20, 0xfa, 0x7d, 0x18, 0x4e, 0x63, 0xa9, 0x9e, 0xa2,
	0x42, 0xa0, 0x04, 0x6a, 0xd7, 0x4b, 0x47, 0x6a, 0x08, 0x0c, 0x1f, 0x29, 0x85, 0xfa, 0xeb, 0x30,
	0x4a, 0xa4, 0xa6, 0x80, 0xc4, 0xf3, 0xd1, 0x7f, 0x00, 0xea, 0xe3, 0xc0, 0x4b, 0x50, 0xb9, 0x5c,
	0x7a, 0xd3, 0x2c, 0x46, 0xf1, 0x8c, 0x58, 0xe0, 0xf8, 0xae, 0xd8, 0xbf, 0xc3, 0xc5, 0x33, 0xfd,
	0x0c, 0x6a, 0x4e, 0xe4, 0x8b, 0x00, 0x7a, 0xa7, 0x4f, 0x4e, 0x4a, 0xa9, 0x62, 0x91, 0xcf, 0x51,
	0x47, 0xbf, 0x82, 0xf6, 0x32, 0xf0, 0x12, 0xfb, 0x6e, 0xe1, 0x8a, 0x90, 0x7a, 0xa7, 0x7b, 0x65,
	0xbb, 0x71, 0xa6, 0xe3, 0x85, 0x15, 0x3d, 0x80, 0x76, 0x9c, 0x44, 0x6e, 0x30, 0x4b, 0x6e, 0x44,
	0xc0, 0x35, 0x5e, 0xc8, 0x18, 0xc4, 0x8d, 0x97, 0xc4, 0x22, 0xea, 0x1a, 0x17, 0xcf, 0xf4, 0x67,
	0xd0, 0x98, 0x45, 0xce, 0xd4, 0x95, 0x5a, 0x62, 0xf9, 0x0f, 0x36, 0x97, 0x1f, 0xa0, 0x92, 0xa7,
	0x36, 0xf4, 0x17, 0x00, 0x7e, 0x18, 0x39, 0x73, 0xf7, 0xcc, 0x89, 0x5d, 0xa9, 0x2d, 0x3c, 0x3e,
	0x2c, 0x7b, 0x0c, 0x85, 0xd6, 0x4a, 0x9c, 0xc4, 0xe5, 0x25, 0x53, 0xfa, 0x2b, 0xe8, 0xfa, 0x2b,
	0x95, 0xd4, 0x79, 0xdc, 0xb3, 0x6c, 0x4b, 0xcf, 0xa0, 0x17, 0xbf, 0xf1, 0x22, 0xdf, 0x8b, 0x6f,
	0xb8, 0x93, 0x78, 0xc1, 0x4c, 0x02, 0xe1, 0x7d, 0x50, 0xf6, 0xb6, 0xd6, 0x2c, 0xf8, 0x86, 0x07,
	0x7d, 0x0e, 0x3b, 0x39, 0xe2, 0x46, 0x43, 0xe7, 0x07, 0xa9, 0x2b, 0x32, 0xb0, 0x0e, 0xd2, 0xaf,
	0x60, 0x77, 0x05, 0xc4, 0x8a, 0xbb, 0x98, 0x87, 0x77, 0xee, 0x54, 0xda, 0x16, 0xb6, 0xf7, 0xa9,
	0xe8, 0xd7, 0xd0, 0x79, 0x1d, 0x46, 0xbe, 0x93, 0x78, 0x61, 0x20, 0xed, 0xbc, 0x9d, 0xc0, 0x7e,
	0xae, 0xe4, 0x2b, 0x3b, 0x0c, 0x66, 0xe1, 0x44, 0x6e, 0x90, 0xc8, 0xa1, 0xef, 0x3b, 0xc1, 0x54,
	0xea, 0x89, 0x9e, 0x58, 0x07, 0xe9, 0x3e, 0x34, 0xaf, 0x83, 0xc1, 0x32, 0x88, 0xa5, 0x27, 0xa2,
	0xc7, 0x32, 0x89, 0x1e, 0x42, 0x77, 0xb6, 0x0c, 0x62, 0xc5, 0xf1, 0x9d, 0x99, 0x3b, 0x95, 0x88,
	0x50, 0x96, 0x21, 0x7a, 0x04, 0xdb, 0x42, 0xcc, 0xe3, 0x7f, 0x2a, 0x4c, 0xd6, 0xb0, 0x7c, 0x15,
	0x2b, 0x09, 0x27, 0x6f, 0xdc, 0xa9, 0x44, 0x57, 0xab, 0x64, 0x10, 0xee, 0x7f, 0xe3, 0x4d, 0xa7,
	0x6e, 0x20, 0xed, 0xa6, 0xfb, 0xa7, 0x12, 0xf6, 0xd7, 0x8d, 0x13, 0xf7, 0xbd, 0xc8, 0x9d, 0x4a,
	0x7b, 0x42, 0x53, 0xc8, 0x54, 0x82, 0xd6, 0x6b, 0x27, 0xf1, 0x66, 0x4b, 0x57, 0xfa, 0x40, 0x24,
	0x2d, 0x17, 0x51, 0x33, 0x0f, 0xbf, 0x67, 0xbe, 0x1f, 0x4a, 0xfb, 0xc2, 0x29, 0x17, 0x57, 0x3c,
	0xfc, 0x50, 0x78, 0x64, 0x3c, 0x94, 0xa0, 0xb5, 0xf0, 0x02, 0x39, 0x9c, 0xba, 0x92, 0x24, 0xb2,
	0x93, 0x8b, 0xf4, 0x39, 0xd4, 0x67, 0x91, 0x37, 0x95, 0x3e, 0x3a, 0xac, 0xbc, 0xe8, 0x9e, 0x92,
	0x72, 0xb6, 0x91, 0xf3, 0x5c, 0x68, 0x31, 0x07, 0x5e, 0x10, 0x27, 0xd1, 0x72, 0x82, 0x29, 0x8f,
	0xa5, 0x03, 0xb1, 0xc8, 0x1a, 0x46, 0xbf, 0x80, 0x9e, 0x23, 0x1e, 0xb9, 0xfb, 0xdd, 0x52, 0x9c,
	0xe7, 0x63, 0x11, 0xda, 0x06, 0x4a, 0x4f, 0xa0, 0x13, 0x5e, 0x7f, 0xeb, 0x4e, 0x12, 0xef, 0xd6,
	0x95, 0x3e, 0x79, 0x60, 0xdb, 0x95, 0x09, 0x7d, 0x01, 0x4d, 0x3f, 0xbc, 0x75, 0xed, 0x50, 0xfa,
	0xbf, 0x07, 0x8c, 0x33, 0x3d, 0xae, 0x3c, 0x5b, 0x06, 0xb6, 0x13, 0xcd, 0xdc, 0x44, 0x7a, 0xf6,
	0xd0, 0xca, 0x85, 0x09, 0x7d, 0x06, 0x70, 0xe3, 0xc4, 0xf2, 0x0d, 0x4a, 0x53, 0xe9, 0x53, 0x11,
	0x6d, 0x09, 0xc1, 0x13, 0xc5, 0xcb, 0xc5, 0x22, 0x8c, 0xb0, 0xe9, 0x91, 0xbc, 0xd2, 0xa1, 0x38,
	0xf7, 0x06, 0x8a, 0xd5, 0x77, 0x83, 0x19, 0x36, 0x8b, 0x30, 0xfa, 0x4c, 0x18, 0x95, 0x21, 0xdc,
	0x69, 0xe2, 0x04, 0x2c, 0x8e, 0x9d, 0xe5, 0x3c, 0x91, 0x8e, 0xd2, 0x9d, 0x56, 0x08, 0xe6, 0xf7,
	0xc6, 0x89, 0x33, 0xc9, 0x9d, 0x4a, 0xff, 0x9f, 0xf6, 0x58, 0x19, 0x43, 0xce, 0x07, 0xa2, 0xe3,
	0x9d, 0xb9, 0x97, 0xdc, 0x49, 0xcf, 0xdf, 0xe6, 0xbc, 0xb1, 0x52, 0xf3, 0xb2, 0x2d, 0xfd, 0x09,
	0x34, 0xa6, 0x91, 0x37, 0x9f, 0x4b, 0x9f, 0x0b, 0xa7, 0xa7, 0x65, 0x27, 0x05, 0x15, 0x3c, 0xd5,
	0x1f, 0xfd, 0xb5, 0x05, 0xad, 0x9c, 0x31, 0xcf, 0x61, 0x67, 0x92, 0x3e, 0xba, 0x91, 0x81, 0xb3,
	0x36, 0x9d, 0xbf, 0xeb, 0xe0, 0xbd, 0x83, 0xf8, 0x93, 0x32, 0x8d, 0x6b, 0x42, 0xf1, 0x18, 0x5f,
	0xeb, 0xf7, 0xf1, 0xf5, 0x37, 0xc5, 0xee, 0xd9, 0x94, 0x6a, 0x88, 0xd0, 0x3f, 0x2a, 0x87, 0x2e,
	0x97, 0x0d, 0xf8, 0xba, 0x3d, 0xa6, 0x7c, 0xe1, 0x04, 0xde, 0x24, 0x9d, 0x90, 0xe9, 0x88, 0x2e,
	0x21, 0x48, 0x09, 0x2f, 0xf8, 0x76, 0x89, 0x7d, 0xda, 0x4a, 0x29, 0x94, 0x89, 0x48, 0x89, 0xc8,
	0x09, 0xde, 0x64, 0xf3, 0x78, 0xad, 0x83, 0xb8, 0x13, 0xbc, 0xe1, 0x42, 0x5b, 0xa6, 0x54, 0x67,
	0x9d, 0x52, 0xcf, 0x00, 0x9c, 0xc9, 0xc4, 0x8d, 0x63, 0xa1, 0x04, 0xa1, 0x2c, 0x21, 0x05, 0xe5,
	0xba, 0x8f, 0x52, 0x6e, 0x1f, 0x9a, 0x4e, 0xe4, 0xdf, 0x69, 0x8a, 0x18, 0x98, 0x1d, 0x9e, 0x49,
	0x98, 0xdc, 0x15, 0x7d, 0x76, 0xd2, 0xe4, 0xae, 0xc8, 0xf2, 0x53, 0x68, 0x86, 0xd1, 0xd4, 0x8d,
	0x62, 0x31, 0x05, 0x37, 0x4a, 0x6d, 0xa2, 0x86, 0x67, 0x06, 0x22, 0xcc, 0x24, 0x71, 0x26, 0x37,
	0xee, 0xd4, 0x0e, 0xc5, 0x54, 0xc4, 0x30, 0x0b, 0x24, 0x63, 0x87, 0xf0, 0x29, 0x06, 0x63, 0x09,
	0xc9, 0x26, 0xd7, 0x30, 0xbc, 0x2d, 0x66, 0x62, 0x21, 0x67, 0xbe, 0xdc, 0x99, 0xcf, 0xbd, 0x62,
	0x1c, 0x96, 0x10, 0xfa, 0x73, 0xe8, 0xc6, 0xcb, 0xeb, 0xac, 0x60, 0xb1, 0xb4, 0x7b, 0x58, 0x7b,
	0xd1, 0x3d, 0xdd, 0xbd, 0xaf, 0xb6, 0x65, 0x3b, 0xfa, 0x05, 0x34, 0xf0, 0xc5, 0x1c, 0x4b, 0x7b,
	0xc2, 0x81, 0x6c, 0xbe, 0x5c, 0x79, 0xaa, 0x46, 0xe2, 0x16, 0x5d, 0x7a, 0x16, 0x06, 0xcb, 0x38,
	0x9b, 0x9f, 0x1b, 0x68, 0x7e, 0x63, 0xd8, 0x7f, 0xe4, 0xc6, 0xb0, 0xc1, 0xba, 0x0f, 0xdf, 0x83,
	0x75, 0xc5, 0x55, 0x40, 0x7a, 0x87, 0xab, 0x40, 0x41, 0xd1, 0x8f, 0x7e, 0x84, 0xa2, 0xff, 0xa8,
	0x42, 0x9d, 0x45, 0xfe, 0xdd, 0x3b, 0x5f, 0x8b, 0xf6, 0xa1, 0xb9, 0x70, 0x23, 0x2f, 0x9c, 0x66,
	0x54, 0xcc, 0xa4, 0xb7, 0x19, 0x56, 0x7f, 0x4f, 0x86, 0x1d, 0x42, 0xb7, 0xc8, 0xa7, 0xa6, 0x08,
	0x82, 0x76, 0x78, 0x19, 0xda, 0x60, 0x42, 0xf3, 0x2d, 0x26, 0x7c, 0x09, 0xed, 0xa2, 0x07, 0x5a,
	0x0f, 0xf7, 0x40, 0x61, 0xb4, 0x59, 0x8d, 0xf6, 0xbb, 0x57, 0xe3, 0xe8, 0x9f, 0x55, 0x78, 0x62,
	0x4d, 0xdc, 0xc0, 0x89, 0xbc, 0x30, 0x1f, 0x32, 0xf7, 0xa5, 0x70, 0xc5, 0xbb, 0xea, 0x26, 0xef,
	0xb2, 0x30, 0x34, 0x25, 0x1f, 0x6a, 0x05, 0x80, 0x64, 0xb8, 0x8e, 0x3c, 0xf7, 0x75, 0x9e, 0xc7,
	0x0e, 0x2f, 0x64, 0xfa, 0x0d, 0xec, 0xc4, 0x89, 0x13, 0x25, 0x7a, 0x38, 0x49, 0x47, 0x62, 0xe3,
	0x01, 0xe2, 0xaf, 0x9b, 0xad, 0x33, 0xbd, 0xf9, 0x30, 0xd3, 0x5b, 0xef, 0xc0, 0xf4, 0xc5, 0xdc,
	0xb9, 0xcb, 0xc6, 0x78, 0x3b, 0x2d, 0xc3, 0x0a, 0xc1, 0x42, 0xa6, 0x92, 0xea, 0x3b, 0xde, 0x3c,
	0x1b, 0x67, 0x65, 0xe8, 0xe8, 0xdf, 0x55, 0x68, 0xe7, 0xc9, 0xbb, 0x37, 0x6b, 0xcf, 0x00, 0xae,
	0x9d, 0xc9, 0x9b, 0x59, 0x14, 0x2e, 0x83, 0x69, 0x96, 0xb9, 0x12, 0x42, 0x65, 0xe8, 0xa5, 0xeb,
	0xc9, 0x79, 0xbd, 0x6b, 0xa2, 0xde, 0x1f, 0xaf, 0xdd, 0x3a, 0xd7, 0xcb, 0xc3, 0x37, 0x5c, 0xf0,
	0x26, 0xe0, 0x44, 0xbe, 0xe7, 0xe2, 0xe7, 0xc4, 0x5b, 0xfc, 0x47, 0x4e, 0xf0, 0x4c, 0xbf, 0xd6,
	0x58, 0x8d, 0x77, 0x69, 0xac, 0x62, 0xb2, 0x34, 0x1f, 0x9f, 0x2c, 0xbf, 0x84, 0x8e, 0x28, 0x92,
	0xed, 0xf9, 0xe9, 0x15, 0xbf, 0x7b, 0x7a, 0x70, 0x92, 0x7e, 0x76, 0x9d, 0xe4, 0x9f, 0x5d, 0x27,
	0x76, 0xfe, 0xd9, 0xc5, 0x57, 0xc6, 0x47, 0x7f, 0xa9, 0x41, 0x7d, 0x90, 0xbd, 0x31, 0xef, 0x4b,
	0x5f, 0x9c, 0x1d, 0xbe, 0x68, 0xbc, 0x12, 0x72, 0x4f, 0xfa, 0xea, 0xff, 0x4b, 0xfa, 0x1a, 0xef,
	0x91, 0xbe, 0xe6, 0x7b, 0xa5, 0xaf, 0xf5, 0x78, 0xfa, 0x9e, 0x01, 0x24, 0xcb, 0x28, 0x30, 0x96,
	0xfe, 0xb5, 0x1b, 0x89, 0x4e, 0xac, 0xf1, 0x12, 0xb2, 0x9e, 0xde, 0xce, 0x7b, 0xa4, 0x97, 0x7e,
	0x03, 0xed, 0x99, 0xe3, 0xbb, 0xc2, 0x11, 0x7e, 0xd4, 0xb1, 0xb0, 0x3d, 0xd6, 0xa0, 0xc6, 0x22,
	0x9f, 0x76, 0xa1, 0x65, 0x8d, 0x47, 0x23, 0x93, 0xdb, 0x64, 0x8b, 0x6e, 0x43, 0x5b, 0x33, 0xfa,
	0xcc, 0xb0, 0xf9, 0x25, 0xa9, 0xa0, 0x4a, 0x66, 0x17, 0x4c, 0xe7, 0x97, 0xa4, 0x4a, 0x77, 0xa0,
	0xc3, 0xb8, 0xad, 0xe9, 0xba, 0xca, 0x2f, 0x49, 0x4d, 0xe8, 0xcc, 0xe1, 0x90, 0x19, 0x0a, 0xa9,
	0x1f, 0xff, 0xab, 0x0a, 0xed, 0xfc, 0x0b, 0x92, 0x12, 0xd8, 0xce, 0x16, 0xbc, 0x1a, 0x1b, 0x1a,
	0xae, 0xfa, 0x14, 0x76, 0xf2, 0x55, 0xaf, 0x74, 0xcd, 0x50, 0x49, 0x85, 0x52, 0xe8, 0x95, 0xa0,
	0xc1, 0xb9, 0x4d, 0xaa, 0x6b, 0xd8, 0x60, 0xcc, 0xb8, 0x42, 0x6a, 0x74, 0x0f, 0x48, 0x81, 0x0d,
	0x35, 0x5d, 0xb3, 0x35, 0x46, 0xea, 0xb8, 0x60, 0x16, 0x58, 0xe6, 0xdc, 0x40, 0xe7, 0x1c, 0x3a,
	0x1f, 0x5b, 0x16, 0xe3, 0xa4, 0x49, 0x77, 0xe1, 0x49, 0x8e, 0x29, 0x9c, 0x0d, 0x4c, 0xd3, 0x20,
	0x2d, 0xba, 0x0f, 0x34, 0x07, 0xe5, 0xb1, 0xc6, 0x99, 0x65, 0x69, 0x2a, 0x27, 0xed, 0xb2, 0xb1,
	0x6c, 0x5a, 0x16, 0x93, 0x5f, 0x92, 0x0e, 0x9e, 0xa5, 0x38, 0xf4, 0xd5, 0x99, 0x41, 0x00, 0xcd,
	0x56, 0x48, 0xba, 0x79, 0x17, 0xa3, 0x5c, 0x81, 0x43, 0x55, 0xd1, 0xc6, 0x43, 0xb2, 0xbd, 0x6e,
	0x7a, 0xae, 0xb2, 0x8b, 0x4b, 0xb2, 0xb3, 0x01, 0x9a, 0xdc, 0x52, 0x49, 0xef, 0xd8, 0x85, 0x4e,
	0xf1, 0x5a, 0xc4, 0x1a, 0xc8, 0xda, 0x85, 0xa6, 0x6b, 0xcc, 0x20, 0x5b, 0x98, 0xe7, 0xfc, 0xdc,
	0x15, 0xac, 0x81, 0x6c, 0x1a, 0x96, 0xcc, 0xb5, 0x11, 0x26, 0xac, 0x0b, 0x2d, 0xae, 0x0e, 0xc6,
	0x3a, 0xe3, 0x69, 0x41, 0x2e, 0x54, 0x5b, 0xe5, 0xcc, 0x20, 0x75, 0xda, 0x81, 0x86, 0xaa, 0x6b,
	0xb6, 0x4a, 0x1a, 0xf8, 0x98, 0x26, 0xb3, 0x79, 0xfc, 0x47, 0xe8, 0x96, 0x3e, 0x8e, 0x53, 0x77,
	0xcb, 0xd6, 0x8c, 0x01, 0xd9, 0xa2, 0x6d, 0xa8, 0x0f, 0x4c, 0x53, 0x21, 0x15, 0xdc, 0x7f, 0x6c,
	0xf4, 0x4d, 0x3e, 0x54, 0x95, 0x6c, 0x0f, 0x66, 0xdb, 0xba, 0x8a, 0xd5, 0x00, 0x68, 0x5a, 0xe7,
	0xec, 0xa5, 0x8a, 0x5b, 0x3c, 0x81, 0xae, 0xa2, 0x0e, 0x4d, 0xce, 0x74, 0xcd, 0x52, 0x15, 0xd2,
	0x38, 0xfe, 0x53, 0x05, 0x3a, 0xc5, 0x67, 0x6a, 0xb6, 0xb8, 0xca, 0x2f, 0x54, 0xb2, 0x85, 0x69,
	0x1c, 0x32, 0x2e, 0x9f, 0x5f, 0xc9, 0xa6, 0x3e, 0x1e, 0x1a, 0xa4, 0x82, 0x15, 0x64, 0xb6, 0xcd,
	0xe4, 0x97, 0x39, 0x54, 0xc5, 0x08, 0x44, 0x73, 0x88, 0xa3, 0xa8, 0xf2, 0xb9, 0xaa, 0x9b, 0xb8,
	0xcf, 0x1e, 0x90, 0xac, 0x9d, 0x34, 0x63, 0x20, 0xda, 0xc7, 0x22, 0x0d, 0x34, 0x51, 0xd4, 0x33,
	0x66, 0x28, 0x2a, 0x69, 0x62, 0x5a, 0xfa, 0xa8, 0xef, 0x6b, 0xaa, 0x42, 0x5a, 0xc7, 0x7f, 0xaf,
	0x40, 0x1d, 0xaf, 0xab, 0x88, 0x9f, 0xe1, 0x2e, 0xba, 0x66, 0x66, 0xa9, 0x3c, 0xe3, 0xda, 0x80,
	0x29, 0x6a, 0x7a, 0x4a, 0x45, 0xbb, 0xd0, 0x2c, 0x54, 0x55, 0x31, 0x49, 0xb2, 0xc9, 0x47, 0x16,
	0xa9, 0x61, 0x18, 0xaf, 0x30, 0x25, 0x75, 0x7c, 0x62, 0x7c, 0x78, 0x49, 0x1a, 0x58, 0x34, 0x83,
	0xd9, 0x9a, 0x69, 0x30, 0xfd, 0x4a, 0x57, 0x99, 0xa2, 0x62, 0x77, 0xe1, 0x11, 0x8a, 0x4a, 0x2a,
	0xda, 0x05, 0x69, 0x61, 0x4e, 0xf2, 0x1e, 0x3a, 0x53, 0x54, 0xd2, 0x2e, 0x03, 0x68, 0xd1, 0x11,
	0x31, 0x30, 0xdb, 0x46, 0x0e, 0x01, 0xc6, 0x30, 0x18, 0x1b, 0x57, 0x23, 0xc6, 0x5f, 0x92, 0xee,
	0xf1, 0x00, 0x7a, 0xeb, 0x3f, 0x1f, 0x30, 0x80, 0x91, 0x69, 0xf2, 0x94, 0x97, 0x4c, 0x51, 0x7f,
	0x37, 0x66, 0x36, 0xc6, 0xde, 0x03, 0x90, 0x39, 0xe6, 0xce, 0x3a, 0x37, 0xed, 0x94, 0x9a, 0xea,
	0xef, 0x65, 0x55, 0xd7, 0x55, 0xc3, 0x26, 0xb5, 0xe3, 0x97, 0xb0, 0xb3, 0x76, 0x7b, 0xc1, 0x4d,
	0xc7, 0x96, 0xaa, 0xab, 0x96, 0x45, 0xb6, 0x84, 0xf3, 0x78, 0x78, 0xa6, 0x72, 0xcb, 0x1c, 0x66,
	0x8b, 0xf5, 0xc7, 0x86, 0x9c, 0x9e, 0x2e, 0x5b, 0xac, 0xdf, 0xd7, 0x64, 0x2d, 0x5d, 0xec, 0x0f,
	0xd0, 0x10, 0xaf, 0xd4, 0xbc, 0x5b, 0xd8, 0x00, 0x0b, 0xda, 0x81, 0x86, 0x28, 0x28, 0xa9, 0x60,
	0x90, 0x43, 0xf3, 0x42, 0x25, 0x55, 0xec, 0x0e, 0x45, 0xed, 0xab, 0x06, 0x76, 0xca, 0x36, 0xb4,
	0x5f, 0x69, 0xf6, 0xb9, 0xc2, 0xd9, 0x2b, 0x52, 0x47, 0x4d, 0x5a, 0xed, 0xb4, 0x1f, 0x39, 0xd3,
	0xf5, 0x4b, 0xd2, 0x3c, 0xfe, 0x5b, 0x15, 0xba, 0xa5, 0x5b, 0x0b, 0x86, 0xc2, 0x8c, 0xcb, 0xab,
	0x34, 0xd5, 0x64, 0x0b, 0xdd, 0xfa, 0x5c, 0x35, 0xc4, 0x36, 0x69, 0xf1, 0x6c, 0xcd, 0x3a, 0xcf,
	0x9a, 0x72, 0x6c, 0x59, 0xc8, 0x10, 0xb1, 0xd5, 0x28, 0x97, 0xea, 0x62, 0x9c, 0x8d, 0x98, 0x81,
	0x76, 0x4d, 0x14, 0x4c, 0xdb, 0x36, 0x87, 0x0c, 0x89, 0xdf, 0x85, 0xd6, 0x48, 0xe5, 0xc2, 0xac,
	0x2d, 0x12, 0x3a, 0xb6, 0x6c, 0x8e, 0x52, 0x47, 0x48, 0x43, 0x95, 0x6b, 0x32, 0x43, 0x8a, 0x03,
	0x34, 0x35, 0x43, 0x41, 0x4d, 0x17, 0x9d, 0x34, 0x6c, 0x20, 0x66, 0x90, 0x6d, 0x34, 0x3b, 0x63,
	0x17, 0x4c, 0x38, 0xed, 0xe0, 0x41, 0x94, 0xb1, 0x2d, 0x9f, 0x93, 0x9e, 0x08, 0x4e, 0xd5, 0x07,
	0x88, 0x3f, 0x41, 0x77, 0x83, 0x59, 0x16, 0x1b, 0x13, 0x82, 0x36, 0xd6, 0x2b, 0xcd, 0xb2, 0xc8,
	0x53, 0xe4, 0xc0, 0x88, 0x8d, 0x98, 0x7e, 0x65, 0xd9, 0xcc, 0x56, 0x2d, 0x42, 0xd1, 0x8b, 0xf5,
	0xd3, 0x4d, 0x77, 0x53, 0x2f, 0x5b, 0xbb, 0x50, 0xc9, 0x9e, 0x98, 0x00, 0xa6, 0x6e, 0x1a, 0x1a,
	0xd3, 0xc9, 0x07, 0xc7, 0xc7, 0xd0, 0x10, 0xd7, 0x60, 0x34, 0xc1, 0xf6, 0x67, 0x3c, 0x4d, 0xcd,
	0x90, 0x59, 0x48, 0xbc, 0x4a, 0x9a, 0xd1, 0x91, 0xa6, 0x90, 0xea, 0xe9, 0x9f, 0x2b, 0xd0, 0xc5,
	0x57, 0xad, 0xe5, 0x46, 0xb7, 0xde, 0xc4, 0xa5, 0xbf, 0x86, 0xba, 0x3a, 0xb9, 0x09, 0xe9, 0xda,
	0xd5, 0x76, 0xed, 0x47, 0xe8, 0xc1, 0xc3, 0xaa, 0xa3, 0x2d, 0xfa, 0x5b, 0x68, 0x5d, 0xb8, 0x51,
	0x8c, 0x84, 0x96, 0xca, 0x76, 0xe5, 0x9f, 0xa4, 0x8f, 0xae, 0x70, 0xdd, 0x14, 0xef, 0xa0, 0xaf,
	0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x30, 0x7c, 0x22, 0x28, 0xc0, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
	Version(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/republique.GameService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Version(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/republique.GameService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	Echo(context.Context, *StringMessage) (*StringMessage, error)
	Version(context.Context, *EmptyMessage) (*StringMessage, error)
}

// UnimplementedGameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (*UnimplementedGameServiceServer) Echo(ctx context.Context, req *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedGameServiceServer) Version(ctx context.Context, req *EmptyMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/republique.GameService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Echo(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/republique.GameService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Version(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "republique.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _GameService_Echo_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _GameService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "republique.proto",
}
